// models/Product.js
import mongoose from "mongoose";

const productSchema = new mongoose.Schema(
  {
    // Basic info
    title: { type: String, required: true },
    pitch: { type: String, required: true, maxlength: 280 }, // micro-pitch
    description: { type: String },
    category: { type: String }, // e.g., SaaS, AI Tool, EdTech, etc.
    tags: [String],

    // Media & showcase
    media: [String], // images/videos/prototypes
    websiteUrl: String,
    demoUrl: String,
    repoUrl: String, // GitHub/Code repo

    // Submission & AI
    aiPitchSuggestions: [String], // generated by AI
    autoTags: [String], // AI-assigned tags
    boostTokensUsed: { type: Number, default: 0 }, // for instant visibility

    // Discovery & Trend Pulse
    trendScore: { type: Number, default: 0 }, // AI-calculated popularity
    hiddenGemScore: { type: Number, default: 0 }, // potential growth signal
    impressions: { type: Number, default: 0 },
    clicks: { type: Number, default: 0 },

    // Interaction & Community
    upvotes: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
    reviews: [
      {
        user: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
        text: String,
        rating: { type: Number, min: 1, max: 5 },
        emojiTags: [String], // üöÄüî•üí°
        createdAt: { type: Date, default: Date.now },
      },
    ],
    questsCompleted: [String], // e.g., ‚ÄúReviewed 3 SaaS tools‚Äù

    // Ranking Engine
    momentumScore: { type: Number, default: 0 }, // activity + quality score
    qualityBoost: { type: Number, default: 0 }, // rewards for detailed reviews
    freshBoostExpires: Date, // short-term boost for new products

    // AI moderation
    flagged: { type: Boolean, default: false },
    moderationNotes: String,

    // SEO
    slug: { type: String, unique: true },
    seoMeta: {
      title: String,
      description: String,
      keywords: [String],
    },

    // Creator info
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
    collaborators: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],

    // System
    status: { type: String, enum: ["pending", "approved", "rejected"], default: "pending" },
  },
  { timestamps: true }
);

export default mongoose.model("Product", productSchema);
